{"version":3,"sources":["../src/withTables.ts"],"names":["withTables","editor","deleteBackward","deleteForward","insertBreak","unit","selection","Range","isCollapsed","cell","Editor","nodes","match","n","type","cellPath","start","Point","equals","anchor","end","table"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,UAAU,GAAGC,MAAM,IAAI;AAC3B,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,aAAlB;AAAiCC,IAAAA;AAAjC,MAAiDH,MAAvD;;AAEAA,EAAAA,MAAM,CAACC,cAAP,GAAwBG,IAAI,IAAI;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAgBL,MAAtB;;AAEA,QAAIK,SAAS,IAAIC,aAAMC,WAAN,CAAkBF,SAAlB,CAAjB,EAA+C;AAC7C,YAAM,CAACG,IAAD,IAASC,cAAOC,KAAP,CAAaV,MAAb,EAAqB;AAClCW,QAAAA,KAAK,EAAEC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW;AADW,OAArB,CAAf;;AAIA,UAAIL,IAAJ,EAAU;AACR,cAAM,GAAGM,QAAH,IAAeN,IAArB;;AACA,cAAMO,KAAK,GAAGN,cAAOM,KAAP,CAAaf,MAAb,EAAqBc,QAArB,CAAd;;AAEA,YAAIE,aAAMC,MAAN,CAAaZ,SAAS,CAACa,MAAvB,EAA+BH,KAA/B,CAAJ,EAA2C;AACzC;AACD;AACF;AACF;;AAEDd,IAAAA,cAAc,CAACG,IAAD,CAAd;AACD,GAnBD;;AAqBAJ,EAAAA,MAAM,CAACE,aAAP,GAAuBE,IAAI,IAAI;AAC7B,UAAM;AAAEC,MAAAA;AAAF,QAAgBL,MAAtB;;AAEA,QAAIK,SAAS,IAAIC,aAAMC,WAAN,CAAkBF,SAAlB,CAAjB,EAA+C;AAC7C,YAAM,CAACG,IAAD,IAASC,cAAOC,KAAP,CAAaV,MAAb,EAAqB;AAClCW,QAAAA,KAAK,EAAEC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW;AADW,OAArB,CAAf;;AAIA,UAAIL,IAAJ,EAAU;AACR,cAAM,GAAGM,QAAH,IAAeN,IAArB;;AACA,cAAMW,GAAG,GAAGV,cAAOU,GAAP,CAAWnB,MAAX,EAAmBc,QAAnB,CAAZ;;AAEA,YAAIE,aAAMC,MAAN,CAAaZ,SAAS,CAACa,MAAvB,EAA+BC,GAA/B,CAAJ,EAAyC;AACvC;AACD;AACF;AACF;;AAEDjB,IAAAA,aAAa,CAACE,IAAD,CAAb;AACD,GAnBD;;AAqBAJ,EAAAA,MAAM,CAACG,WAAP,GAAqB,MAAM;AACzB,UAAM;AAAEE,MAAAA;AAAF,QAAgBL,MAAtB;;AAEA,QAAIK,SAAJ,EAAe;AACb,YAAM,CAACe,KAAD,IAAUX,cAAOC,KAAP,CAAaV,MAAb,EAAqB;AAAEW,QAAAA,KAAK,EAAEC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW;AAAzB,OAArB,CAAhB;;AAEA,UAAIO,KAAJ,EAAW;AACT;AACD;AACF;;AAEDjB,IAAAA,WAAW;AACZ,GAZD;;AAcA,SAAOH,MAAP;AACD,CA5DD;;eA8DeD,U","sourcesContent":["import { Editor, Range, Point } from 'slate'\n\nconst withTables = editor => {\n  const { deleteBackward, deleteForward, insertBreak } = editor\n\n  editor.deleteBackward = unit => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === 'table-cell',\n      })\n\n      if (cell) {\n        const [, cellPath] = cell\n        const start = Editor.start(editor, cellPath)\n\n        if (Point.equals(selection.anchor, start)) {\n          return\n        }\n      }\n    }\n\n    deleteBackward(unit)\n  }\n\n  editor.deleteForward = unit => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === 'table-cell',\n      })\n\n      if (cell) {\n        const [, cellPath] = cell\n        const end = Editor.end(editor, cellPath)\n\n        if (Point.equals(selection.anchor, end)) {\n          return\n        }\n      }\n    }\n\n    deleteForward(unit)\n  }\n\n  editor.insertBreak = () => {\n    const { selection } = editor\n\n    if (selection) {\n      const [table] = Editor.nodes(editor, { match: n => n.type === 'table' })\n\n      if (table) {\n        return\n      }\n    }\n\n    insertBreak()\n  }\n\n  return editor\n}\n\nexport default withTables"],"file":"withTables.js"}