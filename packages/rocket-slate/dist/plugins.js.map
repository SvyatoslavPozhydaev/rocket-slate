{"version":3,"sources":["../src/plugins.tsx"],"names":["elements","addElement","pluginName","typeName","RenderFunction","leaves","addLeaf","Element","attributes","children","element","type","console","log","Leaf","leaf","Object","keys","forEach"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAIA,QAAQ,GAAG,EAAf;;;AACA,MAAMC,UAAU,GAAG,UAASC,UAAT,EAAqBC,QAArB,EAA+BC,cAA/B,EAA8C;AAC/D,MAAIJ,QAAQ,CAACG,QAAD,CAAZ,EAAwB;AACtB,UAAO,kCAAiCA,QAAS,SAAQD,UAAW,4BAA2BF,QAAQ,CAACG,QAAD,CAAR,CAAmBD,UAAW,EAA7H;AACD;;AACDF,EAAAA,QAAQ,CAACG,QAAD,CAAR,GAAqB;AAAED,IAAAA,UAAF;AAAcE,IAAAA;AAAd,GAArB;AACD,CALD;;;AAOA,IAAIC,MAAM,GAAG,EAAb;;;AACA,MAAMC,OAAO,GAAG,UAASJ,UAAT,EAAqBC,QAArB,EAA+BC,cAA/B,EAA8C;AAC5D,MAAIJ,QAAQ,CAACG,QAAD,CAAZ,EAAwB;AACtB,UAAO,+BAA8BA,QAAS,SAAQD,UAAW,4BAA2BF,QAAQ,CAACG,QAAD,CAAR,CAAmBD,UAAW,EAA1H;AACD;;AACDG,EAAAA,MAAM,CAACF,QAAD,CAAN,GAAmB;AAAED,IAAAA,UAAF;AAAcE,IAAAA;AAAd,GAAnB;AACD,CALD;;;;AASA,MAAMG,OAAO,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA;AAAxB,CAAD,KAAuC;AACrD,QAAM;AAAER,IAAAA,UAAF;AAAcE,IAAAA;AAAd,MAAiCJ,QAAQ,CAACU,OAAO,CAACC,IAAT,CAA/C;;AACA,MAAIP,cAAJ,EAAoB;AAClBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,OAAO,CAACC,IAAtC,EAA4C,oBAA5C,EAAkET,UAAlE;AACA,WAAO,6BAAC,cAAD,EAAoBM,UAApB,EAAiCC,QAAjC,CAAP;AACD;;AACD,SAAO,oCAASD,UAAT,EAAsBC,QAAtB,CAAP;AACD,CAPD;;;;AASA,MAAMK,IAAI,GAAG,CAAC;AAAEN,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwBM,EAAAA;AAAxB,CAAD,KAAoC;AAC/CC,EAAAA,MAAM,CAACC,IAAP,CAAYjB,QAAZ,EAAsBkB,OAAtB,CAA8B,UAASf,QAAT,EAAmB;AAC/C,QAAIY,IAAI,CAACZ,QAAD,CAAR,EAAoB;AAClB,YAAM;AAAED,QAAAA,UAAF;AAAcE,QAAAA;AAAd,UAAiCW,IAAI,CAACZ,QAAD,CAA3C;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BV,QAA3B,EAAqC,oBAArC,EAA2DD,UAA3D;AACAO,MAAAA,QAAQ,GAAGL,cAAc,CAACK,QAAD,CAAzB;AACD;AACF,GAND;AAQA,SACE,qCAAUD,UAAV,EACGC,QADH,CADF;AAKD,CAdD","sourcesContent":["import React from 'react'\n\nvar elements = {};\nconst addElement = function(pluginName, typeName, RenderFunction){\n  if (elements[typeName]) {\n    throw `Error: cannot register element ${typeName} from ${pluginName} - already registered by ${elements[typeName].pluginName}`\n  }\n  elements[typeName] = { pluginName, RenderFunction }\n};\n\nvar leaves = {};\nconst addLeaf = function(pluginName, typeName, RenderFunction){\n  if (elements[typeName]) {\n    throw `Error: cannot register leaf ${typeName} from ${pluginName} - already registered by ${elements[typeName].pluginName}`\n  }\n  leaves[typeName] = { pluginName, RenderFunction }\n};\n\nexport { elements, addElement, leaves, addLeaf }\n\nconst Element = ({ attributes, children, element }) => {\n  const { pluginName, RenderFunction } = elements[element.type];\n  if (RenderFunction) {\n    console.log(\"render element\", element.type, \"with function from\", pluginName)\n    return <RenderFunction {...attributes}>{children}</RenderFunction>\n  }\n  return <div {...attributes}>{children}</div>\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  Object.keys(elements).forEach(function(typeName) {\n    if (leaf[typeName]) {\n      const { pluginName, RenderFunction } = leaf[typeName];\n      console.log(\"render leaf\", typeName, \"with function from\", pluginName)\n      children = RenderFunction(children);\n    }\n  })\n\n  return (\n    <span {...attributes}>\n      {children}\n    </span>\n  )\n}\n\nexport { Element, Leaf }"],"file":"plugins.js"}