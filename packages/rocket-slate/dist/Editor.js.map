{"version":3,"sources":["../src/Editor.tsx"],"names":["Editor","props","console","log","initialEditorState","value","setValue","initialValue","renderElement","renderLeaf","editor"],"mappings":";;;;;;;AAIA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAGA,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAYC,+BAAZ;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,qBAASL,KAAK,CAACM,YAAN,IAAsBH,+BAA/B,CAA1B;AACA,QAAMI,aAAa,GAAG,wBAAYP,KAAK,IAAI,6BAAC,oBAAD,EAAaA,KAAb,CAArB,EAA6C,EAA7C,CAAtB;AACA,QAAMQ,UAAU,GAAG,wBAAYR,KAAK,IAAI,6BAAC,iBAAD,EAAUA,KAAV,CAArB,EAA0C,EAA1C,CAAnB;AAEA,QAAMS,MAAM,GAAG,oBACb,MAAM;AACJ,QAAIA,MAAM,GAAG,+BAAY,0BAAZ,CAAb;AACAA,IAAAA,MAAM,GAAG,2BAAU,8BAAc,uBAAW,0BAAY,sBAAU,4BAAaA,MAAb,CAAV,CAAZ,CAAX,CAAd,CAAV,CAAT;AACA,WAAOA,MAAP;AACD,GALY,EAMb,EANa,CAAf;AASAR,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BO,MAA5B,EAAoCL,KAApC;AAEA,SAEE,6BAAC,iBAAD;AAAO,IAAA,MAAM,EAAEK,MAAf;AAAuB,IAAA,KAAK,EAAEL,KAA9B;AAAqC,IAAA,QAAQ,EAAEA,KAAK,IAAIC,QAAQ,CAACD,KAAD;AAAhE,KACE,6BAAC,oBAAD;AACE,IAAA,aAAa,EAAEG,aADjB;AAEE,IAAA,UAAU,EAAEC,UAFd;AAGE,IAAA,WAAW,EAAC;AAHd,IADF,CAFF;AAUD;;eAEcT,M","sourcesContent":["// This is an example with all the plugins enabled \n// It is designed for use as-is\n// Copy this file to your project and customize as necessary if you want\n\nimport React, { useCallback, useMemo, useState } from 'react'\n\nimport { initialEditorState, Element, Leaf } from \"rocket-slate\"\n\nimport { withWysiwyg } from '@rocket-slate/wysiwyg'\nimport { withPasteHtml } from '@rocket-slate/paste-html'\nimport { withMentions } from '@rocket-slate/mentions'\nimport { withLinks } from '@rocket-slate/links'\nimport { withTables } from '@rocket-slate/table'\n\nimport { Editable, withReact, Slate } from 'slate-react'\nimport { createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\n\n\nfunction Editor(props) {\n  console.log(initialEditorState)\n  const [value, setValue] = useState(props.initialValue || initialEditorState)  \n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n\n  const editor = useMemo(\n    () => {\n      let editor = withHistory(createEditor())\n      editor = withReact(withPasteHtml(withTables(withWysiwyg(withLinks(withMentions(editor))))))\n      return editor\n    },\n    []\n  )\n\n  console.log(\"render slate\", editor, value)\n\n  return (\n    // @ts-ignore\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder=\"Paste in some HTML...\"\n      />\n    </Slate>\n  )\n}\n\nexport default Editor"],"file":"Editor.js"}